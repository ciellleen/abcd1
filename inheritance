파이썬 상속

상속을 사용하면 다른 클래스에서 모든 메서드와 속성을 상속받은 클래스를 정의할 수 있습니다.

부모 클래스는 상속되는 클래스로, 기본 클래스라고도 합니다.

자식 클래스는 다른 클래스에서 상속받은 클래스로, 파생 클래스라고도 합니다.

부모 클래스 생성
어떤 클래스든 부모 클래스가 될 수 있으므로, 문법은 다른 클래스를 생성하는 것과 같습니다.

예시:
```python
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

# Person 클래스를 사용하여 객체를 생성하고, printname 메서드를 실행합니다.

x = Person("John", "Doe")
x.printname()
```

자식 클래스 생성
다른 클래스에서 기능을 상속받는 클래스를 만들려면, 자식 클래스를 생성할 때 부모 클래스를 매개변수로 전달합니다.

예시:
```python
class Student(Person):
  pass
```
참고: 클래스에 다른 속성이나 메서드를 추가하지 않으려면 pass 키워드를 사용하세요.

이제 Student 클래스는 Person 클래스와 동일한 속성과 메서드를 갖습니다.

예시:
```python
x = Student("Mike", "Olsen")
x.printname()
```

__init__() 함수 추가
지금까지 우리는 부모 클래스에서 속성과 메서드를 상속받은 자식 클래스를 만들었습니다.

자식 클래스에 __init__() 함수를 추가하려면 (pass 키워드 대신에) __init__() 함수를 사용하세요.

참고: __init__() 함수는 클래스가 새 객체를 만들 때마다 자동으로 호출됩니다.

예시:
```python
class Student(Person):
  def __init__(self, fname, lname):
    # 속성 등 추가
```

__init__() 함수를 추가하면 자식 클래스가 부모의 __init__() 함수를 더 이상 상속하지 않습니다.

참고: 자식의 __init__() 함수는 부모의 __init__() 함수의 상속을 대체합니다.

부모의 __init__() 함수의 상속을 유지하려면 부모의 __init__() 함수를 호출하세요:

예시:
```python
class Student(Person):
  def __init__(self, fname, lname):
    Person.__init__(self, fname, lname)
```

이제 성공적으로 __init__() 함수를 추가했고, 부모 클래스의 상속을 유지하고, __init__() 함수에 기능을 추가할 준비가 되었습니다.

super() 함수 사용
파이썬에는 자식 클래스가 부모 클래스의 모든 메서드와 속성을 상속받게 하는 super() 함수가 있습니다:

예시:
```python
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
```

super() 함수를 사용하면 부모 요소의 이름을 사용할 필요가 없으며, 자동으로 상속됩니다.

속성 추가
예시:
```python
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019
```
아래 예시에서 2019년은 변수여야 하며, 학생 객체를 생성할 때 Student 클래스에 전달되어야 합니다. 이를 위해 __init__() 함수에 또 다른 매개변수를 추가하세요.

예시:
```python
class Student(Person):
  def __init__(self, fname, lname, year):
    super().__init__(fname, lname)
    self.graduationyear = year

x = Student("Mike", "Olsen", 2019)
```

메서드 추가
예시:
```python
class Student(Person):
  def __init__(self, fname, lname, year):
    super().__init__(fname, lname)
    self.graduationyear = year

  def welcome(self):
    print("Welcome", self.firstname, self.lastname, "to the class of", self.graduationyear)
```

자식 클래스에 부모 클래스와 동일한 이름의 함수가 있는 경우, 부모 메서드의 상속이 대체됩니다.
