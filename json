JSON은 데이터를 저장하고 교환하기 위한 구문입니다.

JSON은 JavaScript 객체 표기법으로 작성된 텍스트입니다.

Python에서의 JSON
Python에는 JSON 데이터를 처리할 수 있는 json이라는 내장 패키지가 있습니다.

```python
# json 모듈을 import합니다.
import json
```

JSON 파싱 - JSON을 Python으로 변환
JSON 문자열이 있다면, json.loads() 메서드를 사용하여 파싱할 수 있습니다.

결과는 Python 사전(dictionary)입니다.

```python
# JSON을 Python으로 변환합니다.
import json

# 일부 JSON:
x =  '{ "name":"John", "age":30, "city":"New York"}'

# 파싱합니다:
y = json.loads(x)

# 결과는 Python 사전입니다:
print(y["age"])
```

Python에서 JSON으로 변환
Python 객체가 있다면, json.dumps() 메서드를 사용하여 JSON 문자열로 변환할 수 있습니다.

```python
# Python에서 JSON으로 변환합니다.
import json

# Python 객체 (사전):
x = {
  "name": "John",
  "age": 30,
  "city": "New York"
}

# JSON으로 변환합니다:
y = json.dumps(x)

# 결과는 JSON 문자열입니다:
print(y)
```

다음과 같은 Python 객체를 JSON 문자열로 변환할 수 있습니다:

- 사전(dict)
- 리스트(list)
- 튜플(tuple)
- 문자열(string)
- 정수(int)
- 부동소수점(float)
- True
- False
- None

```python
# Python 객체를 JSON 문자열로 변환하고 값 출력합니다.
import json

print(json.dumps({"name": "John", "age": 30}))
print(json.dumps(["apple", "bananas"]))
print(json.dumps(("apple", "bananas")))
print(json.dumps("hello"))
print(json.dumps(42))
print(json.dumps(31.76))
print(json.dumps(True))
print(json.dumps(False))
print(json.dumps(None))
```

Python에서 JSON으로 변환할 때, Python 객체는 JSON(JavaScript)과 동등하게 변환됩니다:

Python	JSON
dict	Object
list	Array
tuple	Array
str	String
int	Number
float	Number
True	true
False	false
None	null

```python
# 모든 법적 데이터 유형을 포함하는 Python 객체를 변환합니다.
import json

x = {
  "name": "John",
  "age": 30,
  "married": True,
  "divorced": False,
  "children": ("Ann","Billy"),
  "pets": None,
  "cars": [
    {"model": "BMW 230", "mpg": 27.5},
    {"model": "Ford Edge", "mpg": 24.1}
  ]
}

print(json.dumps(x))
```

결과를 서식화하기
위 예제는 JSON 문자열을 출력하지만 들여쓰기와 줄 바꿈이 없어 읽기가 어렵습니다.

json.dumps() 메서드에는 결과를 읽기 쉽게 만드는 매개변수가 있습니다:

들여쓰기를 정의하기 위해 indent 매개변수를 사용할 수 있습니다:

```python
json.dumps(x, indent=4)
```

구분 기호를 정의할 수도 있으며, 기본값은 (", ", ": ")으로, 각 객체를 구분하는 데 쉼표와 공백을 사용하고 키와 값을 구분하는 데 콜론과 공백을 사용합니다:

```python
json.dumps(x, indent=4, separators=(". ", " = "))
```

결과의 키를 정렬할 수 있는 매개변수도 있습니다:

정렬 여부를 지정하기 위해 sort_keys 매개변수를 사용할 수 있습니다:

```python
json.dumps(x, indent=4, sort_keys=True)
```
