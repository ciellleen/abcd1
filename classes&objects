파이썬 클래스와 객체

파이썬은 객체 지향 프로그래밍 언어입니다.

파이썬에서 거의 모든 것은 속성과 메서드를 갖춘 객체입니다.

클래스는 객체 생성을 위한 "블루프린트" 또는 객체 생성자와 같습니다.

클래스 생성
클래스를 생성하려면 키워드 class를 사용합니다.

예시:
```python
class MyClass:
  x = 5
```

객체 생성
이제 MyClass라는 클래스를 사용하여 객체를 생성할 수 있습니다.

예시:
```python
p1 = MyClass()
print(p1.x)
```

__init__() 함수
위의 예제는 가장 간단한 형태의 클래스와 객체로, 실제 응용 프로그램에서는 별로 유용하지 않습니다.

클래스의 의미를 이해하려면 내장 __init__() 함수를 이해해야 합니다.

모든 클래스에는 클래스가 초기화될 때 항상 실행되는 __init__() 함수가 있습니다.

__init__() 함수를 사용하여 객체 속성에 값을 할당하거나 객체를 생성할 때 필요한 다른 작업을 수행합니다.

예시:
```python
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

p1 = Person("John", 36)

print(p1.name)
print(p1.age)
```

__init__() 함수는 클래스를 사용하여 새 객체를 생성할 때마다 자동으로 호출됩니다.

__str__() 함수
__str__() 함수는 클래스 객체가 문자열로 표현될 때 반환해야 하는 내용을 제어합니다.

__str__() 함수가 설정되지 않으면 객체의 문자열 표현이 반환됩니다.

예시:
```python
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

p1 = Person("John", 36)

print(p1)
```

예시:
```python
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def __str__(self):
    return f"{self.name}({self.age})"

p1 = Person("John", 36)

print(p1)
```

객체 메서드
객체에는 메서드를 포함할 수도 있습니다. 객체의 메서드는 해당 객체에 속하는 함수입니다.

Person 클래스에 메서드를 만들어 보겠습니다.

예시:
```python
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print("Hello my name is " + self.name)

p1 = Person("John", 36)
p1.myfunc()
```

self 매개변수
self 매개변수는 클래스의 현재 인스턴스를 참조하며, 클래스에 속하는 변수에 접근하는 데 사용됩니다.

self로 이름 지정할 필요는 없으며 원하는 대로 호출할 수 있지만, 클래스의 모든 함수의 첫 번째 매개변수여야 합니다.

예시:
```python
class Person:
  def __init__(mysillyobject, name, age):
    mysillyobject.name = name
    mysillyobject.age = age

  def myfunc(abc):
    print("Hello my name is " + abc.name)

p1 = Person("John", 36)
p1.myfunc()
```

객체 속성 수정
다음과 같이 객체의 속성을 수정할 수 있습니다.

예시:
```python
p1.age = 40
```

객체 속성 삭제
del 키워드를 사용하여 객체의 속성을 삭제할 수 있습니다.

예시:
```python
del p1.age
```

객체 삭제
del 키워드를 사용하여 객체를 삭제할 수 있습니다.

예시:
```python
del p1
```

pass 문
클래스 정의는 비어 있을 수 없지만, 어떤 이유로든 내용이 없는 클래스 정의가 있다면 오류를 피하기 위해 pass 문을 추가합니다.

예시:
```python
class Person:
  pass
```
