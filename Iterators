파이썬 반복자(Iterators)
반복자(Iterator)는 카운트가능한 여러 값을 포함하는 객체입니다. 이는 값을 반복적으로 탐색할 수 있는 객체를 의미합니다. 기술적으로 파이썬에서 반복자는 __iter__()와 __next__() 메서드를 구현한 객체입니다.

반복자 vs 반복 가능 객체(Iterable)
리스트, 튜플, 딕셔너리, 세트는 모두 반복 가능한 객체입니다. 이들은 반복자를 얻을 수 있는 반복 가능한 컨테이너입니다. 이들 객체는 반복자를 얻기 위해 사용되는 iter() 메서드를 가지고 있습니다.

```python
mytuple = ("apple", "banana", "cherry")
myit = iter(mytuple)

print(next(myit))
print(next(myit))
print(next(myit))
```

문자열도 반복 가능한 객체이며 반복자를 반환할 수 있습니다.

```python
mystr = "banana"
myit = iter(mystr)

print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
```

반복자를 통한 루핑(Looping Through an Iterator)
for 루프를 사용하여 반복 가능한 객체를 반복할 수도 있습니다.

```python
mytuple = ("apple", "banana", "cherry")

for x in mytuple:
  print(x)
```

```python
mystr = "banana"

for x in mystr:
  print(x)
```

위의 for 루프는 실제로 반복자 객체를 생성하고 각 루프마다 next() 메서드를 실행합니다.

반복자 생성(Create an Iterator)
반복자를 만들려면 객체/클래스에 __iter__()와 __next__() 메서드를 구현해야 합니다.

```python
class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    x = self.a
    self.a += 1
    return x

myclass = MyNumbers()
myiter = iter(myclass)

print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
```

위의 예제는 충분한 next() 문이나 for 루프에서 사용되면 무한히 계속될 수 있습니다. 이러한 반복을 무한히 진행하지 않도록 하려면 StopIteration 문을 사용할 수 있습니다. __next__() 메서드에서 반복이 특정 횟수만큼 완료된 경우 오류를 발생시킬 수 있습니다.

```python
class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    if self.a <= 20:
      x = self.a
      self.a += 1
      return x
    else:
      raise StopIteration

myclass = MyNumbers()
myiter = iter(myclass)

for x in myiter:
  print(x)
```

이 코드는 20번의 반복 후 종료됩니다.
